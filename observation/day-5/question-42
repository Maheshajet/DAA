import heapq

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    min_heap = [(node.val, i) for i, node in enumerate(lists) if node]
    heapq.heapify(min_heap)
    dummy = current = ListNode()

    while min_heap:
        val, idx = heapq.heappop(min_heap)
        current.next = current = ListNode(val)
        if lists[idx].next:
            lists[idx] = lists[idx].next
            heapq.heappush(min_heap, (lists[idx].val, idx))

    return dummy.next

l1 = ListNode(1, ListNode(4, ListNode(5)))
l2 = ListNode(1, ListNode(3, ListNode(4)))
l3 = ListNode(2, ListNode(6))
lists = [l1, l2, l3]
merged_list = mergeKLists(lists)

while merged_list:
    print(merged_list.val, end=" ")
    merged_list = merged_list.next
