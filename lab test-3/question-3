import heapq
from collections import defaultdict

class Node:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    # Define comparison operators for the priority queue
    def __lt__(self, other):
        return self.freq < other.freq

def huffman(characters, frequencies):
    # Step 1: Build the priority queue
    priority_queue = []
    for char, freq in zip(characters, frequencies):
        heapq.heappush(priority_queue, Node(char, freq))

    # Step 2: Build the Huffman Tree
    while len(priority_queue) > 1:
        node1 = heapq.heappop(priority_queue)
        node2 = heapq.heappop(priority_queue)
        merged_node = Node(None, node1.freq + node2.freq)
        merged_node.left = node1
        merged_node.right = node2
        heapq.heappush(priority_queue, merged_node)

    root = heapq.heappop(priority_queue)

    # Step 3: Generate Huffman Codes
    huffman_codes = {}
    def generate_codes(node, current_code):
        if node is None:
            return
        if node.char is not None:
            huffman_codes[node.char] = current_code
        generate_codes(node.left, current_code + "0")
        generate_codes(node.right, current_code + "1")

    generate_codes(root, "")

    return sorted(huffman_codes.items())

# Test case
n = 4
characters = ['a', 'b', 'c', 'd']
frequencies = [5, 9, 12, 13]
output = huffman(characters, frequencies)
print(output)  # Output should be [('a', '110'), ('b', '10'), ('c', '0'), ('d', '111')]
